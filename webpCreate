#!/bin/zsh
setopt null_glob

echo "üõ†  Running webpCreate in: $(pwd)"

# --- Early Ghost File Detection ---
jpg_patterns=( *.jpg(N) *.JPG(N) *.jpeg(N) *.JPEG(N) )
png_patterns=( *.png(N) *.PNG(N) )
all_patterns=( "${jpg_patterns[@]}" "${png_patterns[@]}" )

ghosts=()
for f in "${all_patterns[@]}"; do
  [[ -e $f && ! -f $f ]] && ghosts+=("$f")
done

if (( ${#ghosts[@]} )); then
  echo "‚ö†Ô∏è  Detected ${#ghosts[@]} ghost (not downloaded) file(s):"
  printf ' - %s\n' "${ghosts[@]}"
  echo ""
  echo "What would you like to do?"
  echo "  [1] Continue with downloaded files only"
  echo "  [2] Quit and sync these files first"
  echo -n "Enter choice [1/2]: "
  read choice
  case $choice in
    1) echo "‚úÖ Proceeding with available files only...";;
    *) echo "üëã Exiting‚Äîplease download those files and re-run."; exit 0 ;;
  esac
fi

# --- Require cwebp ---
if ! command -v cwebp &> /dev/null; then
  echo "‚ùå cwebp not found. Install with: brew install webp"
  exit 1
fi

# Initialize counters and accumulators
converted_jpg=false
converted_png=false
jpg_count=0
png_count=0
webp_count=0
jpg_size=0
png_size=0
webp_size=0

human_size() {
  local bytes=$1
  printf "%d.%02d MB" $((bytes/1024/1024)) $(((bytes/1024)%1024*100/1024))
}

ask_file_action() {
  local file=$1
  while true; do
    echo "‚ö†Ô∏è  'WEBP/$file' already exists. (o)verwrite / (i)ncrement / (s)kip?"
    read -sk1 choice; echo ""
    case $choice in
      [oO]) return 0 ;;
      [iI]) return 1 ;;
      [sS]) return 2 ;;
      *) echo "‚ùì Press o, i, or s." ;;
    esac
  done
}

convert_and_handle_conflict() {
  local input=$1
  local base="${input%.*}"
  local out="${base}.webp"

  mkdir -p WEBP

  if [[ -e "WEBP/$out" ]]; then
    ask_file_action "$out"
    action=$?
    if   [[ $action -eq 0 ]]; then cwebp -q 80 "$input" -o "$out"
    elif [[ $action -eq 1 ]]; then
      n=1
      while [[ -e "WEBP/${base}_$n.webp" ]]; do ((n++)); done
      out="${base}_$n.webp"
      cwebp -q 80 "$input" -o "$out"
    else
      return 1
    fi
  else
    cwebp -q 80 "$input" -o "$out"
  fi

  mv "$out" WEBP/ && return 0
  return 1
}

# --- Convert JPG/JPEG Variants ---
jpg_files=( "${jpg_patterns[@]}" )
if (( ${#jpg_files[@]} )); then
  mkdir -p JPG
  for file in "${jpg_files[@]}"; do
    [[ -f $file ]] || continue
    size=$(stat -f%z "$file")
    echo "‚û°Ô∏è Converting $file"
    if convert_and_handle_conflict "$file"; then
      mv "$file" JPG/
      ((jpg_count++))
      ((jpg_size+=size))
      converted_jpg=true
    fi
  done
fi

# --- Convert PNG Variants ---
png_files=( "${png_patterns[@]}" )
if (( ${#png_files[@]} )); then
  mkdir -p PNG
  for file in "${png_files[@]}"; do
    [[ -f $file ]] || continue
    size=$(stat -f%z "$file")
    echo "‚û°Ô∏è Converting $file"
    if convert_and_handle_conflict "$file"; then
      mv "$file" PNG/
      ((png_count++))
      ((png_size+=size))
      converted_png=true
    fi
  done
fi

# --- Tally WEBP Outputs ---
webp_files=( WEBP/*.webp(N) )
for w in "${webp_files[@]}"; do
  size=$(stat -f%z "$w")
  ((webp_count++))
  ((webp_size+=size))
done

# --- Final Summary ---
total_input=$((jpg_size + png_size))
total_saved=$((total_input - webp_size))

echo ""
echo "‚úÖ Conversion Summary:"
(( jpg_count > 0 )) && echo " - Converted JPG/JPEG files: $jpg_count ‚Üí $(human_size $jpg_size)"
(( png_count > 0 )) && echo " - Converted PNG files:      $png_count ‚Üí $(human_size $png_size)"
(( webp_count > 0 )) && echo " - Converted WEBP files:     $webp_count ‚Üí $(human_size $webp_size)"

if (( total_input > 0 && webp_size > 0 )); then
  reduction=$(( (total_saved*1000/total_input+5)/10 ))
  echo " - Total Original Size:      $(human_size $total_input)"
  echo " - Total WEBP Size:          $(human_size $webp_size)"
  echo " - Size Savings:             $(human_size $total_saved) ($reduction% reduction)"
elif (( total_input > 0 )); then
  echo "‚ö†Ô∏è  Conversion attempted but no WEBP files created."
else
  echo "‚ùå No files were converted."
fi
