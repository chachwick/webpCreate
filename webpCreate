#!/bin/zsh
setopt null_glob

# --- Default Configuration ---
QUALITY=80         # default quality, use --cwoption "-q <n>" to override
askScale=true
maxDim=0
updateOnly=false
CWOPTS=()          # additional cwebp options

# --- Parse Command-Line Options ---
while [[ $# -gt 0 ]]; do
  case "$1" in
    -\?|--help|-h)
      cat << 'EOF'
Usage: webpCreate [options]

Options:
  --update               Update script from GitHub and exit
  --maxd <pixels>        Max dimension for longest side (skip resize prompt)
  --lossless             Add cwebp -lossless flag
  --cwoption <opt>       Pass custom option to cwebp (e.g. -af or "-z 9")
  -?, -h, --help         Show this help message and exit

Examples:
  webpCreate --maxd 1200 --cwoption "-q 75"    # resize and quality
  webpCreate --lossless --cwoption "-af"       # lossless with auto-filter
  webpCreate -?                                # show this help

webpCreate batch-converts JPEG, JPG, PNG, and HEIC images to WebP, optimized for web delivery, and organizes both the originals and the newly created images.

Why WebP?
WebP is a modern image format that provides superior compression for images on the web,
reducing file size and improving page load performance without sacrificing visual quality.
It supports both lossy and lossless compression.

For full cwebp options, see:
  ‚Ä¢ WebP docs: https://developers.google.com/speed/webp/docs/cwebp
  ‚Ä¢ Manual: man cwebp

If you‚Äôre missing dependencies, run:
  brew install webp ffmpeg  # for cwebp and optional HEIC support
or use the installer script:
  bash <(curl -fsSL https://raw.githubusercontent.com/chachwick/webpCreate/main/install-webpCreate.sh)
EOF
      exit 0
      ;;
    --update)
      updateOnly=true; shift;;
    --maxd)
      if [[ "$2" =~ ^[0-9]+$ ]]; then
        askScale=false; maxDim=$2; shift 2
      else
        echo "‚ùå --maxd requires a numeric argument."; exit 1
      fi;;
    --lossless)
      CWOPTS+=(-lossless); shift;;
    --cwoption)
      if [[ -n "$2" ]]; then
        CWOPTS+=("$2"); shift 2
      else
        echo "‚ùå --cwoption requires an argument (e.g. -af)"; exit 1
      fi;;
    *)
      echo "‚ùå Unknown option: $1"; echo "Run with -? or --help for usage."; exit 1;;
  esac
done

# --- Update Logic ---
if $updateOnly; then
  echo "üîÑ Updating webpCreate to latest version from GitHub..."
  mkdir -p "$HOME/scripts"
  curl -fsSL https://raw.githubusercontent.com/chachwick/webpCreate/main/webpCreate \
    -o "$HOME/scripts/webpCreate"
  chmod +x "$HOME/scripts/webpCreate"
  source "$HOME/.zshrc" 2>/dev/null || true
  echo "‚úÖ webpCreate updated."
  exit 0
fi

# --- Description ---
# webpCreate: Batch-converts images to WebP, optimizes for web delivery, and organizes originals.
# Why WebP?
#   WebP is a modern image format that provides superior compression for images on the web,
#   reducing file size and improving page load performance without sacrificing visual quality.
#   It supports both lossy and lossless compression.
#
# What this script does:
#   1. Detects and converts HEIC files to JPEG, organizing originals into a HEIC/ folder.
#   2. Converts JPG, JPEG, and PNG files to WebP, optionally resizing the longest side.
#   3. Handles filename conflicts with overwrite, increment, or skip prompts.
#   4. Moves original images into JPG/ and PNG/ folders and outputs WebP files to WEBP/.
#
# Usage:
#   webpCreate [options]
#   Options include scaling (--maxd), quality and filter flags (--cwoption), lossless mode (--lossless),
#   and an updater (--update).  See -? or --help for full details.

# --- Dependency Checks ---
echo "üß© Checking dependencies..."
# cwebp
if ! command -v cwebp &> /dev/null; then
  echo "‚ùå cwebp not found. Install with: brew install webp"
  echo "   or run installer: bash <(curl -fsSL https://raw.githubusercontent.com/chachwick/webpCreate/main/install-webpCreate.sh)"
  exit 1
fi
# sips (macOS only)
if ! command -v sips &> /dev/null; then
  echo "‚ùå sips not found. sips is built into macOS."
  echo "   Please run on macOS or install necessary image tools."
  exit 1
fi
# ffmpeg optional for some workflows
if ! command -v ffmpeg &> /dev/null; then
  echo "‚ö†Ô∏è  ffmpeg not found. For HEIC support, install with: brew install ffmpeg"
fi

echo "‚úÖ All required tools are available."

# --- Start Processing ---
echo "üõ†  Running webpCreate in: $(pwd)"

# --- Early Ghost File Detection ---
jpg_patterns=( *.jpg(N) *.JPG(N) *.jpeg(N) *.JPEG(N) )
png_patterns=( *.png(N) *.PNG(N) )
heic_patterns=( *.heic(N) *.HEIC(N) )
all_patterns=( "${jpg_patterns[@]}" "${png_patterns[@]}" "${heic_patterns[@]}" )

ghosts=()
for f in "${all_patterns[@]}"; do
  [[ -e $f && ! -s $f ]] && ghosts+=("$f")
done

if (( ${#ghosts[@]} > 0 )); then
  echo "‚ö†Ô∏è  Detected ${#ghosts[@]} ghost (not downloaded) file(s):"
  printf ' - %s\n' "${ghosts[@]}"
  echo ""
  echo "What would you like to do?"
  echo "  [1] Continue with downloaded files only"
  echo "  [2] Quit and sync these files first"
  echo "  [3] Quit"
  echo -n "Enter choice [1/2/3]: "
  read choice
  case $choice in
    1) echo "‚úÖ Proceeding...";;
    2) echo "üëã Please download those files then re-run."; exit 0;;
    *) echo "üëã Exiting."; exit 0;;
  esac
fi

# --- Determine Scaling ---
if $askScale; then
  echo -n "Would you like to resize images? (y/n): "
  read scaleChoice
  if [[ "$scaleChoice" =~ ^[Yy] ]]; then
    echo -n "Enter max dimension (px) for longest side: "
    read maxDim
    if ! [[ "$maxDim" =~ ^[0-9]+$ ]]; then
      echo "‚ùå Invalid number: $maxDim"; exit 1
    fi
    echo "‚ôªÔ∏è  Scaling to ${maxDim}px on longest side."
  else
    maxDim=0
    echo "‚ÑπÔ∏è No resizing will be applied."
  fi
else
  if (( maxDim > 0 )); then
    echo "‚ôªÔ∏è  Auto-scaling to ${maxDim}px on longest side."
  else
    echo "‚ÑπÔ∏è No resizing as per options."
  fi
fi

# ... rest of script unchanged ...
